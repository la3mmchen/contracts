version: '3'

tasks:
  build:
    desc: Build both frontend and backend Docker images
    cmds:
      - docker-compose build app
      - docker-compose build api
    sources:
      - client/src/**/*
      - client/public/**/*
      - client/package*.json
      - client/vite.config.ts
      - client/tailwind.config.ts
      - client/tsconfig*.json
      - client/Dockerfile
      - client/nginx.conf
      - api/src/**/*
      - api/package*.json
      - api/Dockerfile
    generates:
      - client/.dockerignore

  run:
    desc: Run the full application with file-based storage
    deps: [build]
    cmds:
      - docker-compose up -d
    status:
      - docker ps --format "table {{.Names}}\t{{.Status}}" | grep contracts-app || exit 1
      - docker ps --format "table {{.Names}}\t{{.Status}}" | grep contracts-api || exit 1

  stop:
    desc: Stop all running containers
    cmds:
      - docker-compose down

  clean:
    desc: Clean up Docker images, containers, and volumes
    cmds:
      - docker-compose down -v
      - docker rmi contracts-app contracts-api || true

  logs:
    desc: Show logs from all running containers
    cmds:
      - docker-compose logs -f

  logs-api:
    desc: Show logs from the API container
    cmds:
      - docker-compose logs -f api

  logs-app:
    desc: Show logs from the frontend container
    cmds:
      - docker-compose logs -f app

  shell-api:
    desc: Open a shell in the API container
    cmds:
      - docker exec -it contracts-api sh

  shell-app:
    desc: Open a shell in the frontend container
    cmds:
      - docker exec -it contracts-app sh

  data-info:
    desc: Get information about data storage
    cmds:
      - curl -s http://localhost:3001/api/contracts/info/data | jq .

  file-stats:
    desc: Get file statistics for individual JSON files
    cmds:
      - curl -s http://localhost:3001/api/contracts/info/stats | jq .

  load-test-data:
    desc: Load test contract data into the application
    cmds:
      - ./scripts/load-test-data.sh

  modify-test-dates:
    desc: Modify test contract dates for visual testing of color coding
    cmds:
      - ./scripts/modify-test-dates.sh

  clear-test-data:
    desc: Remove only test data contracts from the system
    cmds:
      - echo "üóëÔ∏è Removing test data contracts..."
      - |
        # Delete test data contracts directly by contractId (stable identifier)
        for contractId in "SOFT-2024-006" "UTL-2024-003" "EXP-2024-009" "MAINT-2024-005" "INS-2024-002" "SERV-2024-008" "TERM-2024-010" "RENT-2024-007" "EXP-2024-001" "CANC-2024-001" "TERM-2024-001" "LEGACY-MIGRATION-001" "SPOT-2024-001" "NFLX-2024-002" "TEST-WEEKLY-001" "TEST-BIWEEKLY-001" "TEST-MONTHLY-001" "TEST-QUARTERLY-001" "TEST-YEARLY-001" "TEST-ONETIME-001" "TEST-LEAPYEAR-001"; do
          echo "Checking for contract: $contractId"
          # Find the contract by contractId and get its current id
          contract_id=$(curl -s http://localhost:3001/api/contracts | jq -r ".[] | select(.contractId == \"$contractId\") | .id")
          if [ ! -z "$contract_id" ] && [ "$contract_id" != "null" ]; then
            echo "Deleting test contract: $contractId (id: $contract_id)"
            curl -s -X DELETE "http://localhost:3001/api/contracts/$contract_id" > /dev/null
            if [ $? -eq 0 ]; then
              echo "‚úÖ Successfully deleted $contractId"
            else
              echo "‚ùå Failed to delete $contractId"
            fi
          else
            echo "‚ÑπÔ∏è  Contract $contractId not found (already deleted or doesn't exist)"
          fi
        done
      - echo "‚úÖ Test data contracts removed!"
      - |
        echo "üìä Current contract count: $(curl -s http://localhost:3001/api/contracts | jq length)"



  health:
    desc: Check health of all services
    cmds:
      - echo "Frontend:" && curl -s -I http://localhost:3000 | head -1 || echo "Frontend not responding"
      - echo "API:" && curl -s http://localhost:3001/api/health | jq . || echo "API not responding"

  test-export-markdown:
    desc: Test Markdown export functionality (now exports ZIP files with individual contracts)
    cmds:
      - echo "üß™ Testing Enhanced Markdown Export Functionality..."
      - echo "üì¶ Exporting all contracts to ZIP with individual files..."
      - curl -s http://localhost:3001/api/contracts/export/markdown -o test-data/exports/contracts-export.zip
      - echo "‚úÖ Export completed! File contracts-export.zip"
      - echo "üìä File size $(wc -c < test-data/exports/contracts-export.zip | tr -d ' ') bytes"
      - echo ""
      - echo "üîç Testing individual export metadata endpoint..."
      - curl -s http://localhost:3001/api/contracts/export/markdown/individual | jq .
      - echo ""
      - echo "üì¶ Exporting active contracts only..."
      - curl -s "http://localhost:3001/api/contracts/export/markdown?status=active" -o test-data/exports/active-contracts.zip
      - echo "‚úÖ Active contracts exported! File active-contracts.zip"
      - echo "üìä File size $(wc -c < test-data/exports/active-contracts.zip | tr -d ' ') bytes"
      - echo ""
      - echo "üìã Available export files"
      - ls -la test-data/exports/*.zip
      - echo ""
      - echo "üîç ZIP file contents (all contracts)"
      - unzip -l test-data/exports/contracts-export.zip | head -20
      - echo ""
      - echo "üí° Each contract is now exported as a separate .md file in the ZIP"
      - echo "üìÅ Individual files use contractId as filename (e.g., UTL-2024-003.md)"
